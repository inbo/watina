% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{get_locs}
\alias{get_locs}
\title{Get locations from the database}
\usage{
get_locs(con, max_filterdepth = 3, mask = NULL, bbox = NULL,
  area_codes = NULL, loc_type = c("P", "S", "R", "N", "W", "D", "L",
  "B"), loc_validity = c("VLD", "ENT", "DEL", "CLD"), loc_vec = NULL,
  collect = FALSE)
}
\arguments{
\item{con}{A \code{DBIConnection} object to Watina.
See \code{\link{connect_watina}} to generate one.}

\item{max_filterdepth}{Numeric.
Maximum depth of the filter bottom below soil surface, as meters.
This condition is only applied to piezometers.}

\item{mask}{An optional geospatial filter of class \code{sf}.
If provided, only locations that intersect with \code{mask} will be returned.
The CRS must be Belgian Lambert 72 (EPSG-code
\href{https://epsg.io/31370}{31370}).}

\item{bbox}{Optional geospatial fiter (rectangle).
A bounding box (class \code{bbox}), or a vector of four named elements
\code{xmin}, \code{xmax}, \code{ymin}, \code{ymax} defining the
boundary coordinates of a bounding box.
If provided, only locations within this rectangular area will be returned.
The CRS must be Belgian Lambert 72 (EPSG-code
\href{https://epsg.io/31370}{31370}).}

\item{area_codes}{An optional vector with area codes.
If provided, only locations within the areas will be returned.}

\item{loc_type}{Type of the location (mainly: the type of measurement device).
Defaults to \code{"P"}, i.e. only groundwater piezometers are returned by
default.
Can be a vector with multiple selected values.}

\item{loc_validity}{Validation status of the location.
Defaults to \code{"VLD"}, i.e. only validated locations are returned by
default.
Can be a vector with multiple selected values.}

\item{loc_vec}{An optional vector with location codes.
If provided, only locations are returned that are present in this vector.}

\item{collect}{Should the data be retrieved as a local tibble?
If \code{FALSE} (the default), a \code{tbl_lazy} object is returned
(lazy query).
Hence the result can be further built upon before retrieving data with
\code{\link[dplyr:collect]{collect()}}.}
}
\value{
By default, a \code{tbl_lazy} object.
With \code{collect = TRUE} or with a specified \code{mask},
a local \code{\link[tibble]{tibble}} is returned.

(TO BE ADDED: Explanation on the variable names of the returned object)
}
\description{
Returns locations from the \emph{Watina} database that meet
several criteria (spatial or non-spatial), either as a lazy object or as a
local tibble.
Essential metadata are included in the result.
}
\details{
(TO BE ADDED: Explanation on the different available values of loc_type
and loc_validity)
}
\examples{
\dontrun{
watina <- connect_watina()

get_locs(watina,
         bbox = c(xmin = 1.4e+5,
                  xmax = 1.7e+5,
                  ymin = 1.6e+5,
                  ymax = 1.9e+5))

get_locs(watina,
         area_codes = c("KAL", "KBR"),
         collect = TRUE)

get_locs(watina,
         area_codes = c("KAL", "KBR"),
         loc_type = c("P", "S"),
         collect = TRUE)

# Mark the different output of:
  get_locs(watina,
           loc_vec = c("KBRP081", "KBRP090", "KBRP095", "KBRS001"),
           loc_type = c("P", "S"),
           collect = TRUE)
  # versus:
  get_locs(watina,
           loc_vec = c("KBRP081", "KBRP090", "KBRP095", "KBRS001"),
           collect = TRUE)

# Selecting all piezometers with status VLD or ENT of the
# province "West-Vlaanderen:
data(BE_ADMIN_PROVINCE,
     package = "BelgiumMaps.StatBel")
library(dplyr)
library(sf)
mymask <-
    st_as_sf(BE_ADMIN_PROVINCE) \%>\%
    filter(str_detect(TX_PROV_DESCR_NL, "West")) \%>\%
    st_transform(crs = 31370)
get_locs(watina,
         loc_validity = c("VLD", "ENT"),
         mask = mymask)

# Disconnect:
DBI::dbDisconnect(watina)
}

}
